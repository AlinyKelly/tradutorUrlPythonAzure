# -*- coding: utf-8 -*-
"""tradutorArtigoV2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wuNz80DWGt0uAWcWEJEd2GgqUM0pcfGb
"""

!pip install requests beautifulsoup4 openai langchain-openai

import requests
from bs4 import BeautifulSoup
from langchain_openai.chat_models.azure import AzureChatOpenAI
import time

def extract_text_from_url(url):
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extrair apenas o conteúdo principal do artigo
        article_content = soup.find('article')

        if article_content:
            # Remover seções indesejadas
            comments_section = article_content.find('section', {'id': 'comments'})
            if comments_section:
                comments_section.decompose()

            hide_comments_modal = article_content.find('div', {'id': 'hide-comments-modal'})
            if hide_comments_modal:
                hide_comments_modal.decompose()

            # Remover scripts e estilos
            for script_or_style in article_content(['script', 'style']):
                script_or_style.decompose()

            texto = article_content.get_text(separator=' ')

            # Limpar o texto
            lines = (line.strip() for line in texto.splitlines())
            parts = (phrase.strip() for line in lines for phrase in line.split("  "))
            texto_limpo = '\n'.join(part for part in parts if part)
            print(texto_limpo)
            return texto_limpo
        else:
            print("Article content not found.")
            return None
    else:
        print(f"Failed to fetch the URL. Status code: {response.status_code}")
        return None

client = AzureChatOpenAI(
    azure_endpoint="YOUR_AZURE_ENDPOINT",
    api_key="YOUR_API_KEY",
    api_version="YOUR_API_VERSION",
    azure_deployment="YOUR_DEPLOYMENT_NAME",
    max_retries=0
)

def translate_text_in_chunks(text, lang):
    max_tokens_per_request = 500  # Ajuste conforme necessário
    text_chunks = [text[i:i+max_tokens_per_request] for i in range(0, len(text), max_tokens_per_request)]

    translated_text = ""
    for chunk in text_chunks:
        messages = [
            ("system", "Você atua como tradutor de textos"),
            ("user", f"Traduza o seguinte trecho para o idioma {lang}:\n\n{chunk}")
        ]

        try:
            response = client.invoke(messages)
            translated_text += response.content + "\n\n"
        except Exception as e:
            print("Erro ao chamar a API:", e)
            print("Aguardando antes de tentar novamente...")
            time.sleep(60)

    return translated_text

# URL do artigo
url = 'https://dev.to/esdanielgomez/using-azure-openai-service-gpt-4-in-net-2l1f'
text = extract_text_from_url(url)

if text:
    article = translate_text_in_chunks(text, "pt-br")
    print(article)